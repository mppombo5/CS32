LINEAR

bool somePredicate(double x) {
    return x > 30;
}

/////////////////////////////////////////////////
/// REMEMBER TO DELETE THIS BEFORE TURNING IN ///
/////////////////////////////////////////////////
int main() {
    const double arrAnyTrue[10] {
            1, 2, 3, 4, 5, 35, 7, 8, 9, 10
            //  0  1  2  3  4  5   6  7  8  9
    };
    const double arrAnyTrue1[11] {
            1, 2, 3, 4, 5, 35, 7, 8, 9, 10, 11
        //  0  1  2  3  4  5   6  7  8  9
    };

    const double arrCountTrue[10] {
        1, 2, 3, 45, 55, 65, 7, 8, 95, 10
    //  0  1  2  3   4   5   6  7  8   9
    };

    const double arrPosMin[10] {
        10, 9, 8, 7, 6, 5, 4, 3, 2, 1
    };

    const double arrIncludes1[7] {
            10, 50, 40, 20, 50, 40, 30
    };
    const double arrIncludes2[3] {
        50, 20, 30
    };
    const double arrIncludes3[3] {
        50, 40, 40
    };
    const double arrIncludes4[3] {
        50, 30, 20
    };
    const double arrIncludes5[3] {
        10, 20, 20
    };

    // anyTrue tests
    assert( anyTrue(arrAnyTrue, 10));
    assert( anyTrue(arrAnyTrue+5, 5));
    assert(!anyTrue(arrAnyTrue+6, 4));
    assert(!anyTrue(arrAnyTrue, 5));
    assert(!anyTrue(arrAnyTrue, 0));

    // countTrue tests
    assert(countTrue(arrCountTrue, 10) == 4);
    assert(countTrue(arrCountTrue+4, 6) == 3);
    assert(countTrue(arrAnyTrue, 10) == 1);
    assert(countTrue(arrCountTrue+5, 5) == 2);
    assert(countTrue(arrAnyTrue+6, 4) == 0);

    // firstTrue tests
    assert(firstTrue(arrAnyTrue, 10) == 5);
    assert(firstTrue(arrAnyTrue+5, 5) == 0);
    assert(firstTrue(arrCountTrue+3, 7) == 0);
    assert(firstTrue(arrCountTrue+6, 4) == 2);
    assert(firstTrue(arrAnyTrue, 0) == -1);
    // where it starts getting dicey
    assert(firstTrue(arrAnyTrue+6, 4) == -1);

    // positionOfMin tests
    assert(positionOfMin(arrAnyTrue, 10) == 0);
    assert(positionOfMin(arrCountTrue, 10) == 0);
    assert(positionOfMin(arrAnyTrue+5, 5) == 1);
    assert(positionOfMin(arrPosMin, 10) == 9);
    assert(positionOfMin(arrPosMin+3, 7) == 6);
    assert(positionOfMin(arrCountTrue+4, 6) == 2);
    assert(positionOfMin(arrCountTrue+5, 5) == 1);

    // includes tests
    assert( includes(arrIncludes1, 7, arrIncludes2, 3));
    assert( includes(arrIncludes1, 7, arrIncludes3, 3));
    assert(!includes(arrIncludes1, 7, arrIncludes4, 3));
    assert(!includes(arrIncludes1, 7, arrIncludes5, 3));

    cout << "All tests passed!" << endl;

    return 0;
}

================================================

MAZE

int main() {
    string maze[10] = {
            "XXXXXXXXXX",
            "X....X...X", //                         |
            "X.XX.XX..X", //                         V
            "XXX....X.X", // starting point above XXX.XXXX
            "X.XXX.XXXX",
            "X.X...X..X",
            "X...X.X..X",
            "XXXXX.X.XX",
            "X........X",
            "XXXXXXXXXX"
    };

    string maze1[10] = {
            "XXXXXXXXXX",
            "X...X....X",
            "XX.X..XX.X",
            "XX...X...X",
            "X.X.X..XXX",
            "X...X.X.XX",
            "X.X.X....X",
            "XXX.X.XX.X",
            "X...X..X.X",
            "XXXXXXXXXX",
    };

    string maze2[10] = {
            "XXXXXXXXXX",
            "X...X....X",
            "XX.X..XX.X",
            "XX...X...X",
            "X.X.X..XXX",
            "X...X.X.XX",
            "X.X.X....X",
            "XXX.X.XXXX",
            "X...X..X.X",
            "XXXXXXXXXX",
    };

    string maze3[10] = {
            "XXXXXXXXXX",
            "XXXXXXX..X",
            "XX.......X",
            "X..X....XX",
            "X..X..XXXX",
            "X..XXX.X.X",
            "XX...X...X",
            "X....XX..X",
            "XXX.....XX",
            "XXXXXXXXXX",
    };

    string maze4[10] = {
            "XXXXXXXXXX",
            "XXXXXXX..X",
            "XX.....X.X",
            "X..X....XX",
            "X..X..XXXX",
            "X..XXX.X.X",
            "XX...X...X",
            "X....XX..X",
            "XXX.....XX",
            "XXXXXXXXXX",
    };

    assert(pathExists(maze1, 10, 10, 1, 3, 8, 8));
    assert(!pathExists(maze2, 10, 10, 1, 3, 8, 8));
    assert(pathExists(maze3, 10, 10, 5, 6, 2, 8));
    assert(!pathExists(maze4, 10, 10, 5, 6, 2, 8));

    if (pathExists(maze, 10,10, 1,1, 8,8))
        cout << "Solvable!" << endl;
    else
        cout << "Out of luck!" << endl;
    return 0;
}

===========================================================

TREE

template <typename item>
void printList(item a[], int n) {
    for (int i = 0; i < n; i++) {
        cout << a[i] << endl;
    }
}

int main() {
    double nums[10] {
        6, 92, 6, 63, 5, 10, 6, 8, 52, 24
    };
    order(nums, 10);
    //printList(nums, 10);
    for (int i = 1; i < 10; i++) {
        assert(nums[i] <= nums[i-1]);
    }

    double nums1[10] {
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10
    };
    order (nums1, 10);
    //printList(nums1, 10);
    for (int i = 1; i < 10; i++) {
        assert(nums1[i] <= nums1[i-1]);
    }
    //cout << "====" << endl;
    double nums2[10] {
        1, 2, 3, 45, 56, 67, 7, 8, 11, 423
    };
    order(nums2, 10);
    // fixed it ayy
    printList(nums2, 10);
    for (int i = 1; i < 10; i++) {
        assert(nums2[i] <= nums2[i-1]);
    }

    double nums3[11] {
        1, 3, 2, 56, 45, 8, 7, 67, 11, 432, 572
    };
    order(nums3, 11);
    for (int i = 1; i < 11; i++) {
        assert(nums3[i] <= nums3[i-1]);
    }

    double nums4[11] {
            1, 2, 3, 45, 56, 67, 7, 8, 11, 423, 424
    };
    order(nums4, 11);
    for (int i = 1; i < 11; i++) {
        assert(nums4[i] <= nums4[i-1]);
    }

    double nums5[31] {
            534.15, 160.02, 295.04, 269.4, 170.37, 326.77, 418.76, 390.29,
            225.47,79.5,594.6,137.1,64.23,399.53,567.59,187.12,510.51,
            182.73,365.12,226.45,43.03,22.78,200.8,433.68,379.44,
            117.57,457.7,153.07,458.17,545.76,0
    };
    order(nums5, 31);
    //for (int k = 0; k < 29; k++) {
    //    nums5[30] = nums5[k];
        for (int i = 1; i < 31; i++) {
            assert(nums5[i] <= nums5[i-1]);
        }
    //}
    //printList(nums5, 30);

    double nums6[60] {
            425.62,425.62,8.64,50.5,385.24,369.38,402.61,564.24,408.24,
            538.71,468.51,504.54,458.3,229.1,575.07,591.04,192.29,590.31,
            359.57,401.28,149.39,480.25,494.64,172.39,203.81,177.15,
            82.12,241.92,457.95,102.93,8.85,295.45,24.21,190.15,93.74,
            21.43,147.51,18.61,33.09,460.53,489.96,84.86,356.75,119.75,
            356.67,396.29,390.7,391.07,320.2,89.21,470.08,52.45,247.93,
            279.59,587.34,161.32,118.07,430.97,213.15,188.25
    };
    order(nums6, 60);
    printList(nums6, 60);
    for (int i = 1; i < 60; i++) {
        assert(nums6[i] <= nums6[i-1]);
    }

    double cI1[7] {
            10, 50, 40, 20, 50, 40, 30
    };
    double cI2[3] {
            10, 20, 40
    };
    double cI3[3] {
            10, 40, 30
    };
    double cI4[3] {
            20, 10, 40
    };
    double cI5[3] {
            50, 40, 30
    };

    assert(countIncludes(cI1, 7, cI2, 3) == 1);
    assert(countIncludes(cI1, 7, cI3, 3) == 2);
    assert(countIncludes(cI1, 7, cI4, 3) == 0);
    assert(countIncludes(cI1, 7, cI5, 3) == 3);

    cout << "All tests passed!" << endl;
}